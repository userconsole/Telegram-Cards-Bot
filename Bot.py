import sqlite3
import os
import random
import time
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# --------- #
TOKEN = 'TOKEN'
# create base
DB_PATH = 'dataBase.db'
CARDS_DIR = 'cards'
db_lock = asyncio.Lock()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False, timeout=10)
    cursor = conn.cursor()
    cursor.execute('PRAGMA journal_mode=WAL;')

    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            total_points INTEGER DEFAULT 0,
            last_used INTEGER DEFAULT 0
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_cards (
            user_id INTEGER,
            card_id INTEGER,
            count INTEGER DEFAULT 1,
            UNIQUE(user_id, card_id)
        )
    ''')
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def save_user(user):
    async with db_lock:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False, timeout=10)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO users (id, username, first_name, last_name, total_points)
            VALUES (?, ?, ?, ?, 0)
        ''', (user.id, user.username, user.first_name, user.last_name))
        conn.commit()
        conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
def get_random_card():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False, timeout=10)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM cards ORDER BY RANDOM() LIMIT 1')
    card = cursor.fetchone()
    conn.close()
    return card

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_points(user_id):
    conn = sqlite3.connect(DB_PATH, check_same_thread=False, timeout=10)
    cursor = conn.cursor()
    cursor.execute('SELECT total_points FROM users WHERE id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    if result is None:
        return 0
    return result[0]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ—à–µ–¥—à–µ–≥–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
def check_time_limit(user_id):
    conn = sqlite3.connect(DB_PATH, check_same_thread=False, timeout=10)
    cursor = conn.cursor()
    cursor.execute('SELECT last_used FROM users WHERE id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    
    if result:
        last_used = result[0]
        current_time = int(time.time())
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        if current_time - last_used < 1800:  # 1800 —Å–µ–∫—É–Ω–¥ = 30 –º–∏–Ω—É—Ç
            return False  # –í—Ä–µ–º—è –µ—â—ë –Ω–µ –∏—Å—Ç–µ–∫–ª–æ
    return True  # –õ–∏–±–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –ª–∏–±–æ –∑–∞–ø–∏—Å—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
async def update_last_used(user_id):
    async with db_lock:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False, timeout=10)
        cursor = conn.cursor()
        current_time = int(time.time())
        cursor.execute('UPDATE users SET last_used = ? WHERE id = ?', (current_time, user_id))
        conn.commit()
        conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def add_card_to_collection(user_id, card_id, points):
    async with db_lock:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False, timeout=10)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO user_cards (user_id, card_id, count)
            VALUES (?, ?, 1)
            ON CONFLICT(user_id, card_id) DO UPDATE SET count = count + 1
        ''', (user_id, card_id))
        cursor.execute('''
            UPDATE users
            SET total_points = total_points + ?
            WHERE id = ?
        ''', (points, user_id))
        conn.commit()
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await save_user(user)
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç–∏–∫,  {user.first_name}! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /cards, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cards
async def cards(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await save_user(user)

    if not check_time_limit(user.id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ 30 –º–∏–Ω—É—Ç
        await update.message.reply_text("–ö–∞—Ä—Ç—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç.")
        return

    card = get_random_card()
    if not card:
        await update.message.reply_text("–ö–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –£–ø—Å.")
        return

    card_id, name, rarity, points, image = card
    await add_card_to_collection(user.id, card_id, points)
    await update_last_used(user.id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    total_points = get_user_points(user.id)

    caption = (f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
               f"üåü –†–µ–¥–∫–æ—Å—Ç—å: {rarity}\n"
               f"üíØ –û—á–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {points}\n"
               f"üìù –í–∞—à–∏ –æ–±—â–∏–µ –æ—á–∫–∏: {total_points}")

    image_path = os.path.join(CARDS_DIR, image)
    try:
        with open(image_path, 'rb') as img:
            await update.message.reply_photo(photo=img, caption=caption)
    except FileNotFoundError:
        await update.message.reply_text("–ö–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Ç –≤ –±–∞–∑–µ...")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /collection
async def collection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    async with db_lock:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False, timeout=10)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT c.name, c.rarity, uc.count
            FROM user_cards uc
            JOIN cards c ON uc.card_id = c.id
            WHERE uc.user_id = ?
        ''', (user.id,))
        cards = cursor.fetchall()
        conn.close()

    if not cards:
        await update.message.reply_text("–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞.")
        return

    collection_text = "\n".join([f"üè∑Ô∏è {name} [{rarity}] {count}x" for name, rarity, count in cards])
    await update.message.reply_text(f"üìú –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:\n{collection_text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /leaderboard
async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with db_lock:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False, timeout=10)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT first_name, total_points FROM users
            ORDER BY total_points DESC
            LIMIT 10
        ''')
        top_users = cursor.fetchall()
        conn.close()

    if not top_users:
        await update.message.reply_text("–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    message = "üèÜ **–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
    for i, (first_name, points) in enumerate(top_users, start=1):
        message += f"{i}. {first_name}: {points} –æ—á–∫–æ–≤\n \n"

    await update.message.reply_text(message)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    init_db()
   
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cards", cards))
    app.add_handler(CommandHandler("collection", collection))
    app.add_handler(CommandHandler("leaderboard", leaderboard))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
